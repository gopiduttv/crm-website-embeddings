/**
 * ============================================
 * CRM WEB TRACKER - PRODUCTION SCRIPT
 * Full-Featured Tracking & Widget System
 * ============================================
 * 
 * Features:
 * - Page view tracking
 * - Form submission tracking
 * - Click event tracking
 * - Chat widget
 * - Analytics dashboard
 * - Session management
 * - Real-time event streaming
 * 
 * Usage:
 * <script src="http://localhost:5000/script/YOUR-CLIENT-ID.js"></script>
 */

(function() {
  'use strict';

  // ============================================
  // CONFIGURATION
  // ============================================
  
  const CONFIG = {
    clientId: '{{CLIENT_ID}}',
    serverUrl: '{{SERVER_URL}}',
    apiKey: '{{API_KEY}}',
    // These are placeholders that will be replaced by the server.
    // They are wrapped in quotes to be syntactically valid.
    widgets: '{{WIDGETS_CONFIG}}',
    theme: '{{THEME_CONFIG}}',
    debug: '{{DEBUG_MODE}}'
  };

  // ============================================
  // UTILITY FUNCTIONS
  // ============================================
  
  const Utils = {
    log: function(...args) {
      if (CONFIG.debug) {
        console.log('[CRM Tracker]', ...args);
      }
    },
    
    error: function(...args) {
      console.error('[CRM Tracker]', ...args);
    },
    
    generateSessionId: function() {
      return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    },
    
    getCookie: function(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
      return null;
    },
    
    setCookie: function(name, value, days = 365) {
      const expires = new Date(Date.now() + days * 864e5).toUTCString();
      document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
    },
    
    getOrCreateVisitorId: function() {
      let visitorId = this.getCookie('crm_visitor_id');
      if (!visitorId) {
        visitorId = 'visitor_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        this.setCookie('crm_visitor_id', visitorId);
      }
      return visitorId;
    },
    
    debounce: function(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
  };

  // ============================================
  // SESSION MANAGER
  // ============================================
  
  const SessionManager = {
    sessionId: null,
    visitorId: null,
    startTime: Date.now(),
    
    init: function() {
      this.visitorId = Utils.getOrCreateVisitorId();
      this.sessionId = Utils.getCookie('crm_session_id');
      
      if (!this.sessionId) {
        this.sessionId = Utils.generateSessionId();
        Utils.setCookie('crm_session_id', this.sessionId, 0.25); // 6 hours
      }
      
      Utils.log('Session initialized:', {
        sessionId: this.sessionId,
        visitorId: this.visitorId
      });
    },
    
    getSessionData: function() {
      return {
        sessionId: this.sessionId,
        visitorId: this.visitorId,
        duration: Date.now() - this.startTime
      };
    }
  };

  // ============================================
  // EVENT TRACKER
  // ============================================
  
  const EventTracker = {
    queue: [],
    isOnline: navigator.onLine,
    
    init: function() {
      // Monitor online status
      window.addEventListener('online', () => {
        this.isOnline = true;
        this.flushQueue();
      });
      
      window.addEventListener('offline', () => {
        this.isOnline = false;
      });
      
      // Flush queue periodically
      setInterval(() => this.flushQueue(), 10000);
    },
    
    track: function(eventType, eventData) {
      const event = {
        type: eventType,
        apiKey: CONFIG.apiKey,
        timestamp: new Date().toISOString(),
        url: window.location.href,
        referrer: document.referrer,
        userAgent: navigator.userAgent,
        screenResolution: `${screen.width}x${screen.height}`,
        ...SessionManager.getSessionData(),
        ...eventData
      };
      
      Utils.log('Tracking event:', eventType, eventData);
      
      this.queue.push(event);
      
      if (this.isOnline) {
        this.flushQueue();
      }
    },
    
    flushQueue: function() {
      if (this.queue.length === 0) return;
      
      const events = [...this.queue];
      this.queue = [];
      
      fetch(CONFIG.serverUrl + '/v1/track/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ events }),
        keepalive: true
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        return response.json();
      })
      .then(result => {
        Utils.log('Events sent successfully:', result);
      })
      .catch(error => {
        Utils.error('Failed to send events:', error);
        // Re-add to queue to retry
        this.queue.unshift(...events);
      });
    }
  };

  // ============================================
  // PAGE VIEW TRACKING
  // ============================================
  
  const PageViewTracker = {
    init: function() {
      if (!CONFIG.widgets?.analytics?.trackPageViews) return;
      
      // Track initial page view
      this.trackPageView();
      
      // Track page visibility changes
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
          this.trackPageView();
        }
      });
      
      // Track SPA navigation (for React, Vue, etc.)
      if (window.history && window.history.pushState) {
        const originalPushState = window.history.pushState;
        window.history.pushState = function(...args) {
          originalPushState.apply(this, args);
          PageViewTracker.trackPageView();
        };
      }
    },
    
    trackPageView: function() {
      EventTracker.track('pageview', {
        page: {
          title: document.title,
          path: window.location.pathname,
          search: window.location.search,
          hash: window.location.hash,
          referrer: document.referrer
        }
      });
    }
  };

  // ============================================
  // FORM TRACKING
  // ============================================
  
  const FormTracker = {
    trackedForms: new Set(),
    
    init: function() {
      if (!CONFIG.widgets?.forms?.enabled) return;
      
      // Track existing forms
      this.trackAllForms();
      
      // Watch for new forms (SPA support)
      const observer = new MutationObserver(Utils.debounce(() => {
        this.trackAllForms();
      }, 500));
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    },
    
    trackAllForms: function() {
      const selector = CONFIG.widgets.forms.captureSelector || 'form';
      const forms = document.querySelectorAll(selector);
      
      Utils.log(`Found ${forms.length} forms`);
      
      forms.forEach(form => {
        if (!this.trackedForms.has(form)) {
          this.trackForm(form);
          this.trackedForms.add(form);
        }
      });
    },
    
    trackForm: function(form) {
      const formId = form.id || form.name || 'unnamed-form-' + this.trackedForms.size;
      
      Utils.log('Tracking form:', formId);
      
      // Track form submission
      form.addEventListener('submit', (e) => {
        this.onFormSubmit(e, form, formId);
      });
      
      // Track form field changes
      if (CONFIG.widgets.forms.autoCapture) {
        const inputs = form.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
          input.addEventListener('blur', () => {
            this.onFieldChange(input, formId);
          });
        });
      }
    },
    
    onFormSubmit: function(event, form, formId) {
      const formData = new FormData(form);
      const fields = {};
      const excludeFields = CONFIG.widgets.forms.excludeFields || [];
      
      for (let [key, value] of formData.entries()) {
        // Skip excluded fields
        const shouldExclude = excludeFields.some(field => 
          key.toLowerCase().includes(field.toLowerCase())
        );
        
        if (shouldExclude) {
          fields[key] = '[REDACTED]';
        } else {
          fields[key] = value;
        }
      }
      
      Utils.log('Form submitted:', formId, fields);
      
      EventTracker.track('form_submission', {
        form: {
          formId: formId,
          formName: form.getAttribute('name') || formId,
          formAction: form.action || window.location.href,
          fields: fields
        }
      });
    },
    
    onFieldChange: function(input, formId) {
      const fieldName = input.name || input.id;
      const fieldValue = input.value;
      
      if (fieldName && fieldValue) {
        Utils.log('Field changed:', formId, fieldName);
        
        EventTracker.track('form_interaction', {
          form: {
            formId: formId,
            fieldName: fieldName,
            fieldType: input.type,
            fieldValue: fieldValue.substring(0, 50) // Truncate for privacy
          }
        });
      }
    }
  };

  // ============================================
  // CLICK TRACKING
  // ============================================
  
  const ClickTracker = {
    init: function() {
      if (!CONFIG.widgets?.analytics?.trackClicks) return;
      
      document.addEventListener('click', (e) => {
        this.onElementClick(e);
      }, true);
    },
    
    onElementClick: function(event) {
      const target = event.target;
      const tagName = target.tagName.toLowerCase();
      
      // Track button clicks
      if (tagName === 'button' || target.closest('button')) {
        const button = tagName === 'button' ? target : target.closest('button');
        EventTracker.track('button_click', {
          element: {
            type: 'button',
            text: button.textContent.trim(),
            id: button.id,
            className: button.className
          }
        });
      }
      
      // Track link clicks
      if (tagName === 'a') {
        EventTracker.track('link_click', {
          element: {
            type: 'link',
            href: target.href,
            text: target.textContent.trim(),
            external: target.hostname !== window.location.hostname
          }
        });
      }
    }
  };

  // ============================================
  // CHAT WIDGET
  // ============================================
  
  const ChatWidget = {
    isOpen: false,
    container: null,
    
    init: function() {
      if (!CONFIG.widgets?.chat?.enabled) return;
      
      Utils.log('Initializing chat widget');
      this.createWidget();
    },
    
    createWidget: function() {
      const config = CONFIG.widgets.chat;
      const position = config.position || 'bottom-right';
      const color = config.color || '#0066cc';
      const greeting = config.greeting || 'Hi! How can we help?';
      
      // Create container
      this.container = document.createElement('div');
      this.container.id = 'crm-chat-widget';
      this.container.innerHTML = `
        <style>
          #crm-chat-widget {
            position: fixed;
            ${position.includes('bottom') ? 'bottom: 20px;' : 'top: 20px;'}
            ${position.includes('right') ? 'right: 20px;' : 'left: 20px;'}
            z-index: 999999;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
          }
          
          .crm-chat-bubble {
            width: 60px;
            height: 60px;
            border-radius: 30px;
            background: ${color};
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: transform 0.2s;
          }
          
          .crm-chat-bubble:hover {
            transform: scale(1.1);
          }
          
          .crm-chat-bubble svg {
            width: 30px;
            height: 30px;
          }
          
          .crm-chat-window {
            display: none;
            position: absolute;
            ${position.includes('bottom') ? 'bottom: 80px;' : 'top: 80px;'}
            ${position.includes('right') ? 'right: 0;' : 'left: 0;'}
            width: 350px;
            height: 500px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 40px rgba(0,0,0,0.16);
            flex-direction: column;
          }
          
          .crm-chat-window.open {
            display: flex;
          }
          
          .crm-chat-header {
            background: ${color};
            color: white;
            padding: 15px;
            border-radius: 10px 10px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          
          .crm-chat-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 0;
            line-height: 1;
          }
          
          .crm-chat-body {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f5f5f5;
          }
          
          .crm-chat-message {
            background: white;
            padding: 10px 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
          }
          
          .crm-chat-input-container {
            padding: 15px;
            border-top: 1px solid #eee;
            display: flex;
            gap: 10px;
          }
          
          .crm-chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
          }
          
          .crm-chat-send {
            background: ${color};
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
          }
        </style>
        
        <div class="crm-chat-bubble" onclick="CRMTracker.ChatWidget.toggle()">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12c0 1.54.36 3 .97 4.29L2 22l5.71-.97C9 21.64 10.46 22 12 22c5.52 0 10-4.48 10-10S17.52 2 12 2zm0 18c-1.33 0-2.58-.31-3.71-.86l-.26-.14-2.74.46.46-2.74-.14-.26C5.31 14.58 5 13.33 5 12c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7z"/>
          </svg>
        </div>
        
        <div class="crm-chat-window" id="crm-chat-window">
          <div class="crm-chat-header">
            <div>
              <div style="font-weight: bold;">Chat Support</div>
              <div style="font-size: 12px; opacity: 0.9;">We typically reply in minutes</div>
            </div>
            <button class="crm-chat-close" onclick="CRMTracker.ChatWidget.toggle()">×</button>
          </div>
          <div class="crm-chat-body" id="crm-chat-body">
            <div class="crm-chat-message">${greeting}</div>
          </div>
          <div class="crm-chat-input-container">
            <input type="text" class="crm-chat-input" id="crm-chat-input" placeholder="Type a message..."/>
            <button class="crm-chat-send" onclick="CRMTracker.ChatWidget.sendMessage()">Send</button>
          </div>
        </div>
      `;
      
      document.body.appendChild(this.container);
      
      // Track chat widget shown
      EventTracker.track('widget_shown', {
        widget: { type: 'chat' }
      });
    },
    
    toggle: function() {
      this.isOpen = !this.isOpen;
      const window = document.getElementById('crm-chat-window');
      if (window) {
        window.classList.toggle('open', this.isOpen);
        
        EventTracker.track(this.isOpen ? 'chat_opened' : 'chat_closed', {
          widget: { type: 'chat' }
        });
      }
    },
    
    sendMessage: function() {
      const input = document.getElementById('crm-chat-input');
      const message = input.value.trim();
      
      if (!message) return;
      
      Utils.log('Chat message sent:', message);
      
      EventTracker.track('chat_message_sent', {
        widget: {
          type: 'chat',
          message: message
        }
      });
      
      // Add message to chat
      const chatBody = document.getElementById('crm-chat-body');
      const messageEl = document.createElement('div');
      messageEl.className = 'crm-chat-message';
      messageEl.style.background = CONFIG.widgets.chat.color || '#0066cc';
      messageEl.style.color = 'white';
      messageEl.style.marginLeft = 'auto';
      messageEl.style.maxWidth = '70%';
      messageEl.textContent = message;
      chatBody.appendChild(messageEl);
      chatBody.scrollTop = chatBody.scrollHeight;
      
      input.value = '';
      
      // Simulate response (in production, this would be real-time via WebSocket)
      setTimeout(() => {
        const responseEl = document.createElement('div');
        responseEl.className = 'crm-chat-message';
        responseEl.textContent = 'Thanks for your message! Our team will respond shortly.';
        chatBody.appendChild(responseEl);
        chatBody.scrollTop = chatBody.scrollHeight;
      }, 1000);
    }
  };

  // ============================================
  // MAIN INITIALIZATION
  // ============================================
  
  const CRMTracker = {
    initialized: false,
    
    init: function() {
      if (this.initialized) {
        Utils.log('Already initialized');
        return;
      }
      
      Utils.log('Initializing CRM Tracker', CONFIG);
      
      // Initialize core systems
      SessionManager.init();
      EventTracker.init();
      
      // Initialize tracking modules
      PageViewTracker.init();
      FormTracker.init();
      ClickTracker.init();
      
      // Initialize widgets
      ChatWidget.init();
      
      // Track initialization
      EventTracker.track('tracker_initialized', {
        config: {
          clientId: CONFIG.clientId,
          version: '1.0.0',
          features: {
            pageViews: CONFIG.widgets?.analytics?.trackPageViews,
            formTracking: CONFIG.widgets?.forms?.enabled,
            clickTracking: CONFIG.widgets?.analytics?.trackClicks,
            chatWidget: CONFIG.widgets?.chat?.enabled
          }
        }
      });
      
      this.initialized = true;
      Utils.log('CRM Tracker initialized successfully');
      
      // Expose public API
      window.CRMTracker = {
        track: EventTracker.track.bind(EventTracker),
        ChatWidget: ChatWidget,
        getSession: SessionManager.getSessionData.bind(SessionManager)
      };
    }
  };

  // ============================================
  // AUTO-INITIALIZE
  // ============================================
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => CRMTracker.init());
  } else {
    CRMTracker.init();
  }

})();
